<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:redis="http://www.springframework.org/schema/redis"
    xmlns:p="http://www.springframework.org/schema/p"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis.xsd">  
     
    <!-- 配置获取spring上下文工具类 -->
    <bean id="springContextHelper" class="com.ltchen.demo.util.spring.SpringContextHelper" />
    
    <!-- 加载ldap.properites配置文件 --> 
    <context:property-placeholder location="classpath:redis.properties" />
  
  	<!-- pool配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxTotal" value="${redis.maxTotal}" />  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="minIdle" value="${redis.minIdle}" />  
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />  
    </bean>  
  	
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">  
        <property name="hostName" value="${redis.hostName}" />  
        <property name="port" value="${redis.port}" />  
        <property name="timeout" value="${redis.timeout}" />  
        <property name="database" value="${redis.database}" />  
        <property name="password" value="${redis.password}" />  
        <property name="usePool" value="${redis.usePool}" />  
        <property name="poolConfig" ref="jedisPoolConfig" />  
    </bean>  
  
  	<!-- sentinel配置 -->
<!--     <bean id="redisSentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">   -->
<!--         <property name="master">   -->
<!--             <bean class="org.springframework.data.redis.connection.RedisNode">   -->
<!--                 <property name="name" value="mymaster" />   -->
<!--             </bean>   -->
<!--         </property>   -->
<!--         <property name="sentinels">   -->
<!--             <set>   -->
<!--                <value>192.168.0.125:26379</value> -->
<!-- 				<value>192.168.0.126:26379</value> -->
<!-- 				<value>192.168.0.127:26379</value> -->
<!--             </set>   -->
<!--         </property>   -->
<!--     </bean>   -->
  
<!--   	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">   -->
<!--         <property name="password" value="${redis.password}" />   -->
<!--         <constructor-arg name="sentinelConfig" ref="redisSentinelConfiguration" />   -->
<!--         <constructor-arg name="poolConfig" ref="jedisPoolConfig" />   -->
<!--     </bean>   -->
  
    <!-- redis template,p表示对该bean里面的属性进行注入，格式为p:属性名=注入的对象 效果与在bean里面使用<property>标签一样 -->  
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory">  
		<!--<property name="connectionFactory" ref="connectionFactory" /> -->
        <!-- 序列化方式 建议key/hashKey采用StringRedisSerializer。 -->  
        <property name="keySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="valueSerializer">  
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
        </property>  
        <property name="hashKeySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="hashValueSerializer">  
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
        </property>  
    </bean>  
    
    <!-- 对string操作的封装 -->  
	<!--<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" p:connection-factory-ref="jedisConnectionFactory" />   -->
	<!--<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager" c:template-ref="redisTemplate"/> -->  
    
    <!-- spring-data-redis为对shard进行封装,自定义shardedJedisPool -->
    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="192.168.0.127" />
                    <constructor-arg name="port" value="6379" />
                    <constructor-arg name="timeout" value="2000" />
                    <constructor-arg name="name" value="192.168.0.127:6379" />
                    <property name="password" value="123456" />  
                </bean>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="192.168.0.127" />
                    <constructor-arg name="port" value="6380" />
                    <constructor-arg name="timeout" value="2000" />
                    <constructor-arg name="name" value="192.168.0.127:6380" />
                    <property name="password" value="123456" /> 
                </bean>
            </list>
        </constructor-arg>
    </bean> 
     
    <!-- 自动扫描，依赖注入dao的实现类 -->
    <context:component-scan base-package="com.ltchen.demo.redis.dao.impl" />
    
    <!-- 自动扫描，依赖注入service的实现类 -->
    <context:component-scan base-package="com.ltchen.demo.redis.service.impl" />      
</beans>  
